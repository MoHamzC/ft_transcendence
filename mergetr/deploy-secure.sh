#!/bin/bash
# deploy-secure.sh - Script de d√©ploiement s√©curis√© pour ft_transcendence
# Ce script installe et configure automatiquement tout le projet avec la s√©curit√© maximale

set -euo pipefail  # Mode strict bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ ft_transcendence - D√©ploiement S√©curis√©${NC}"
echo -e "${BLUE}===============================================${NC}"

# Fonction de log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
    exit 1
}

# V√©rification des pr√©requis
check_requirements() {
    log "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©"
    fi
    
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
    fi
    
    if ! command -v npm &> /dev/null; then
        error "npm n'est pas install√©"
    fi
    
    log "‚úÖ Tous les pr√©requis sont satisfaits"
}

# Installation des d√©pendances
install_dependencies() {
    log "Installation des d√©pendances backend..."
    cd backend
    
    if [ ! -f package.json ]; then
        error "package.json non trouv√© dans le r√©pertoire backend"
    fi
    
    # Installation d√©terministe
    npm ci
    
    log "‚úÖ D√©pendances backend install√©es"
    cd ..
    
    if [ -d "frontend" ]; then
        log "Installation des d√©pendances frontend..."
        cd frontend
        npm ci
        npm run build
        cd ..
        log "‚úÖ Frontend build√©"
    fi
}

# Configuration des certificats SSL
setup_ssl() {
    log "Configuration des certificats SSL..."
    
    mkdir -p docker/nginx/ssl
    
    if [ ! -f docker/nginx/ssl/cert.pem ]; then
        log "G√©n√©ration des certificats SSL auto-sign√©s..."
        
        # G√©n√©rer une cl√© priv√©e
        openssl genrsa -out docker/nginx/ssl/key.pem 2048
        
        # G√©n√©rer un certificat auto-sign√©
        openssl req -new -x509 -key docker/nginx/ssl/key.pem \
            -out docker/nginx/ssl/cert.pem -days 365 \
            -subj "/C=FR/ST=France/L=Paris/O=42School/OU=ft_transcendence/CN=localhost"
        
        log "‚úÖ Certificats SSL g√©n√©r√©s"
    else
        log "‚úÖ Certificats SSL d√©j√† pr√©sents"
    fi
}

# Configuration de l'environnement
setup_environment() {
    log "Configuration de l'environnement..."
    
    if [ ! -f .env ]; then
        if [ -f .env.secure ]; then
            log "Copie de .env.secure vers .env..."
            cp .env.secure .env
        elif [ -f .env.example ]; then
            log "Copie de .env.example vers .env..."
            cp .env.example .env
            warn "‚ö†Ô∏è  Veuillez modifier .env avec vos vraies valeurs"
        else
            error "Aucun fichier d'environnement trouv√©"
        fi
    fi
    
    log "‚úÖ Environnement configur√©"
}

# Audit de s√©curit√©
security_audit() {
    log "Audit de s√©curit√©..."
    
    # V√©rifier les d√©pendances
    cd backend
    if npm audit --audit-level moderate; then
        log "‚úÖ Aucune vuln√©rabilit√© critique d√©tect√©e"
    else
        warn "‚ö†Ô∏è  Des vuln√©rabilit√©s ont √©t√© d√©tect√©es, tentative de correction..."
        npm audit fix
    fi
    cd ..
    
    # V√©rifier les permissions des fichiers sensibles
    if [ -f .env ]; then
        chmod 600 .env
        log "‚úÖ Permissions .env s√©curis√©es"
    fi
    
    if [ -f docker/nginx/ssl/key.pem ]; then
        chmod 600 docker/nginx/ssl/key.pem
        log "‚úÖ Permissions cl√© SSL s√©curis√©es"
    fi
}

# Test de la configuration
test_configuration() {
    log "Test de la configuration..."
    
    # V√©rifier que tous les services peuvent d√©marrer
    if docker-compose -f docker-compose.secure.yml config > /dev/null 2>&1; then
        log "‚úÖ Configuration Docker Compose valide"
    else
        error "‚ùå Configuration Docker Compose invalide"
    fi
    
    # Test des certificats SSL
    if [ -f docker/nginx/ssl/cert.pem ] && [ -f docker/nginx/ssl/key.pem ]; then
        if openssl x509 -in docker/nginx/ssl/cert.pem -text -noout > /dev/null 2>&1; then
            log "‚úÖ Certificats SSL valides"
        else
            error "‚ùå Certificats SSL invalides"
        fi
    fi
}

# D√©marrage des services
start_services() {
    log "Arr√™t des anciens conteneurs..."
    docker-compose down -v 2>/dev/null || true
    
    log "Construction et d√©marrage des services s√©curis√©s..."
    docker-compose -f docker-compose.secure.yml up --build -d
    
    log "Attente du d√©marrage des services..."
    sleep 10
    
    # V√©rifier que tous les services sont d√©marr√©s
    if docker-compose -f docker-compose.secure.yml ps | grep -q "Up"; then
        log "‚úÖ Services d√©marr√©s avec succ√®s"
    else
        error "‚ùå √âchec du d√©marrage des services"
    fi
}

# Test de sant√©
health_check() {
    log "V√©rification de la sant√© des services..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -k -f https://localhost/healthz > /dev/null 2>&1; then
            log "‚úÖ Service principal accessible via HTTPS"
            break
        fi
        
        log "Tentative $attempt/$max_attempts - En attente..."
        sleep 2
        ((attempt++))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        warn "‚ö†Ô∏è  Le service n'est pas encore accessible, v√©rifiez les logs"
        docker-compose -f docker-compose.secure.yml logs --tail=20
    fi
}

# Affichage des informations finales
show_info() {
    echo -e "${GREEN}"
    echo "==============================================="
    echo "üéâ D√âPLOIEMENT S√âCURIS√â TERMIN√â !"
    echo "==============================================="
    echo -e "${NC}"
    
    echo "üì± Application disponible sur :"
    echo "   ‚Ä¢ HTTPS: https://localhost"
    echo "   ‚Ä¢ HTTP:  http://localhost (redirig√© vers HTTPS)"
    echo ""
    
    echo "üîß Services :"
    echo "   ‚Ä¢ Backend:    Port 3000 (interne)"
    echo "   ‚Ä¢ Frontend:   Servi via nginx"
    echo "   ‚Ä¢ PostgreSQL: Port 5432 (interne)"
    echo "   ‚Ä¢ Vault:      Port 8200 (interne)"
    echo ""
    
    echo "üìã Commandes utiles :"
    echo "   ‚Ä¢ Logs:           docker-compose -f docker-compose.secure.yml logs -f"
    echo "   ‚Ä¢ Arr√™t:          docker-compose -f docker-compose.secure.yml down"
    echo "   ‚Ä¢ Restart:        docker-compose -f docker-compose.secure.yml restart"
    echo "   ‚Ä¢ Status:         docker-compose -f docker-compose.secure.yml ps"
    echo ""
    
    echo "üîí S√©curit√© :"
    echo "   ‚Ä¢ HTTPS obligatoire avec certificats auto-sign√©s"
    echo "   ‚Ä¢ Rate limiting activ√©"
    echo "   ‚Ä¢ Headers de s√©curit√© configur√©s"
    echo "   ‚Ä¢ Validation XSS activ√©e"
    echo "   ‚Ä¢ Secrets g√©r√©s par Vault"
    echo ""
    
    warn "‚ö†Ô∏è  IMPORTANT: En production, remplacez les certificats auto-sign√©s par des certificats valides"
}

# Fonction principale
main() {
    check_requirements
    install_dependencies
    setup_ssl
    setup_environment
    security_audit
    test_configuration
    start_services
    health_check
    show_info
}

# Gestion des signaux
trap 'error "D√©ploiement interrompu"' INT TERM

# V√©rification que le script est ex√©cut√© depuis la racine du projet
if [ ! -f "backend/package.json" ]; then
    error "Ce script doit √™tre ex√©cut√© depuis la racine du projet ft_transcendence"
fi

# Ex√©cution
main "$@"
