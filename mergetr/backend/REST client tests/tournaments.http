# Tests REST pour la gestion des tournois LOCAL
# Conformité avec les exigences du sujet ft_transcendence - VERSION LOCALE

### Variables
@baseUrl = http://localhost:5001/api
@tournamentId = {{createTournament.response.body.tournament.id}}
@matchId = {{getNextMatch.response.body.match.id}}

### 1. Créer un nouveau tournoi
# @name createTournament
POST {{baseUrl}}/tournaments
Content-Type: application/json

{
  "name": "Tournoi Local Test",
  "description": "Test du système de tournoi local 1v1",
  "maxPlayers": 4,
  "type": "elimination"
}

### 2. Lister les tournois
GET {{baseUrl}}/tournaments
Content-Type: application/json

### 3. Vérifier la disponibilité d'un alias
POST {{baseUrl}}/tournaments/{{tournamentId}}/check-alias
Content-Type: application/json

{
  "alias": "PlayerOne"
}

### 4. Inscription sans compte utilisateur - Joueur 1
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerOne"
}

### 5. Inscription sans compte utilisateur - Joueur 2
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerTwo"
}

### 6. Inscription sans compte utilisateur - Joueur 3
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerThree"
}

### 7. Inscription sans compte utilisateur - Joueur 4
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerFour"
}

### 8. Détails du tournoi avec participants
GET {{baseUrl}}/tournaments/{{tournamentId}}
Content-Type: application/json

### 9. Démarrer le tournoi (génère les matchs du premier tour)
POST {{baseUrl}}/tournaments/{{tournamentId}}/start
Content-Type: application/json

{}

### 10. Obtenir le prochain match (matchmaking automatique)
# @name getNextMatch
GET {{baseUrl}}/tournaments/{{tournamentId}}/next-match
Content-Type: application/json

### 11. Enregistrer le résultat du premier match (simple)
POST {{baseUrl}}/matches/{{matchId}}/result
Content-Type: application/json

{
  "winnerId": "{{getNextMatch.response.body.match.player1_id}}",
  "player1Score": 5,
  "player2Score": 3
}

### 12. Vérifier le prochain match après résultat
GET {{baseUrl}}/tournaments/{{tournamentId}}/next-match
Content-Type: application/json
### 13. Test d'inscription avec alias déjà utilisé (doit échouer)
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerOne"
}

### 14. Test de résultat invalide - match nul (doit échouer)
POST {{baseUrl}}/matches/invalid-match-id/result
Content-Type: application/json

{
  "winnerId": "some-id",
  "player1Score": 3,
  "player2Score": 3
}

### 15. Détails finaux du tournoi
GET {{baseUrl}}/tournaments/{{tournamentId}}
Content-Type: application/json
