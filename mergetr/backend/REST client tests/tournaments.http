# Tests REST pour la gestion améliorée des tournois
# Conformité avec les exigences du sujet ft_transcendence

### Variables
@baseUrl = http://localhost:5001/api
@tournamentId = {{createTournament.response.body.tournament.id}}
@matchId = {{getNextMatch.response.body.match.id}}

### 1. Obtenir les règles de jeu standardisées
GET {{baseUrl}}/tournament-rules
Content-Type: application/json

### 2. Créer un nouveau tournoi
# @name createTournament
POST {{baseUrl}}/tournaments
Content-Type: application/json

{
  "name": "Tournoi Test Conformité",
  "description": "Test des règles uniformes et du matchmaking",
  "maxPlayers": 4,
  "type": "elimination"
}

### 3. Lister les tournois
GET {{baseUrl}}/tournaments
Content-Type: application/json

### 4. Vérifier la disponibilité d'un alias
POST {{baseUrl}}/tournaments/{{tournamentId}}/check-alias
Content-Type: application/json

{
  "alias": "PlayerOne"
}

### 5. Inscription sans compte utilisateur - Joueur 1
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerOne"
}

### 6. Inscription sans compte utilisateur - Joueur 2
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerTwo"
}

### 7. Inscription sans compte utilisateur - Joueur 3
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerThree"
}

### 8. Inscription sans compte utilisateur - Joueur 4
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerFour"
}

### 9. Détails du tournoi avec participants
GET {{baseUrl}}/tournaments/{{tournamentId}}
Content-Type: application/json

### 10. Démarrer le tournoi (génère les matchs avec règles uniformes)
POST {{baseUrl}}/tournaments/{{tournamentId}}/start
Content-Type: application/json

### 11. Obtenir le prochain match (avec annonce)
# @name getNextMatch
GET {{baseUrl}}/tournaments/{{tournamentId}}/next-match
Content-Type: application/json

### 12. Simuler un résultat de match avec validation des règles
POST {{baseUrl}}/matches/{{matchId}}/result
Content-Type: application/json

{
  "winnerId": "{{getNextMatch.response.body.match.player1_id}}",
  "player1Score": 5,
  "player2Score": 3,
  "gameMetadata": {
    "rules_validated": true,
    "paddle_speed_player1": 5,
    "paddle_speed_player2": 5,
    "final_score_player1": 5,
    "final_score_player2": 3,
    "game_duration": 120,
    "ball_hits": 24,
    "game_type": "pong"
  }
}

### 13. Vérifier le prochain match après résultat
GET {{baseUrl}}/tournaments/{{tournamentId}}/next-match
Content-Type: application/json

### 14. Obtenir les notifications du tournoi
GET {{baseUrl}}/tournaments/{{tournamentId}}/notifications
Content-Type: application/json

### 15. Envoyer une notification de test
POST {{baseUrl}}/tournaments/{{tournamentId}}/notify
Content-Type: application/json

{
  "type": "test_notification",
  "message": "Ceci est un test de notification",
  "data": {
    "test": true
  },
  "priority": "medium"
}

### 16. Statistiques des connexions WebSocket
GET {{baseUrl}}/tournaments/ws-stats
Content-Type: application/json

### 17. Test d'inscription avec alias déjà utilisé (doit échouer)
POST {{baseUrl}}/tournaments/{{tournamentId}}/register
Content-Type: application/json

{
  "alias": "PlayerOne"
}

### 18. Test de résultat invalide - match nul (doit échouer)
POST {{baseUrl}}/matches/invalid-match-id/result
Content-Type: application/json

{
  "winnerId": "some-id",
  "player1Score": 3,
  "player2Score": 3,
  "gameMetadata": {
    "rules_validated": true,
    "paddle_speed_player1": 5,
    "paddle_speed_player2": 5,
    "final_score_player1": 3,
    "final_score_player2": 3
  }
}

### 19. Test de règles invalides - vitesse de raquette différente (doit échouer)
POST {{baseUrl}}/matches/{{matchId}}/result
Content-Type: application/json

{
  "winnerId": "some-id",
  "player1Score": 5,
  "player2Score": 2,
  "gameMetadata": {
    "rules_validated": true,
    "paddle_speed_player1": 7,
    "paddle_speed_player2": 5,
    "final_score_player1": 5,
    "final_score_player2": 2
  }
}
