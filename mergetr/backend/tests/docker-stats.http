# Tests StatsService via Docker Compose - ft_transcendence
# Fichier pour tester les statistiques dans l'environnement Docker

### Variables pour Docker
@baseUrl = http://localhost:5001
@apiPrefix = /api/user

### Test 1: Sanity Check - Serveur accessible
GET {{baseUrl}}/healthcheck

### Test 2: Création utilisateur de test via Docker
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "email": "docker.test@stats.test",
  "password": "password123456"
}

### Test 3: Login pour récupérer le token JWT
# @name login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "docker.test@stats.test", 
  "password": "password123456"
}

### Test 4: Récupérer les statistiques initiales
# Remplacez le token ci-dessous par celui obtenu du login
GET {{baseUrl}}{{apiPrefix}}/statistics
Authorization: Bearer TOKEN_ICI_A_COPIER

### Test 5: Récupérer le leaderboard
GET {{baseUrl}}{{apiPrefix}}/leaderboard
Authorization: Bearer TOKEN_ICI_A_COPIER

### Test 6: Test pagination du leaderboard
GET {{baseUrl}}{{apiPrefix}}/leaderboard?limit=5&offset=0
Authorization: Bearer TOKEN_ICI_A_COPIER

### Test 7: Test sans authentification (doit échouer)
GET {{baseUrl}}{{apiPrefix}}/statistics

### Test 8: Test avec token invalide (doit échouer)
GET {{baseUrl}}{{apiPrefix}}/statistics
Authorization: Bearer invalid.token.here

### Test 9: Vérification format des stats
# Doit retourner:
# {
#   "stats": {
#     "gamesPlayed": 0,
#     "gamesWon": 0, 
#     "gamesLost": 0,
#     "winRate": 0
#   }
# }
GET {{baseUrl}}{{apiPrefix}}/statistics
Authorization: Bearer TOKEN_ICI_A_COPIER

### Test 10: Vérification format du leaderboard  
# Doit retourner:
# {
#   "leaderboard": [
#     {
#       "id": "uuid",
#       "email": "string",
#       "wins": number,
#       "games": number
#     }
#   ]
# }
GET {{baseUrl}}{{apiPrefix}}/leaderboard
Authorization: Bearer TOKEN_ICI_A_COPIER

###
### Instructions Docker:
### 1. Démarrer les services: docker-compose up -d
### 2. Vérifier l'état: docker-compose ps
### 3. Voir les logs: docker-compose logs node
### 4. Exécuter les tests: Utiliser REST Client dans VS Code
###
