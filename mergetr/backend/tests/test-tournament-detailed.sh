#!/bin/bash

# test-tournament-detailed.sh
# Tests d√©taill√©s du syst√®me de tournois avec v√©rifications

set -e  # Arr√™ter en cas d'erreur

BASE_URL="http://localhost:5001/api"
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables globales
TOURNAMENT_ID=""
PARTICIPANT_IDS=()
MATCH_IDS=()

echo -e "${BLUE}üéæ TESTS D√âTAILL√âS DU SYST√àME DE TOURNOIS${NC}"
echo "=============================================="

# Fonction d'affichage des r√©sultats
log_test() {
    local status=$1
    local message=$2
    if [ "$status" = "OK" ]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
    elif [ "$status" = "WARN" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
    else
        echo -e "${RED}‚ùå $message${NC}"
        exit 1
    fi
}

# Fonction pour attendre et v√©rifier
wait_and_check() {
    echo -e "${YELLOW}Attente de 2 secondes...${NC}"
    sleep 2
}

# V√©rification que le backend est accessible
echo -e "${YELLOW}1. V√©rification de l'accessibilit√© du backend...${NC}"
if curl -s "$BASE_URL/../health" > /dev/null; then
    log_test "OK" "Backend accessible"
else
    log_test "ERROR" "Backend non accessible √† $BASE_URL"
fi

# Test 1: Cr√©er un nouveau tournoi
echo -e "\n${YELLOW}2. Cr√©ation d'un nouveau tournoi...${NC}"
RESPONSE=$(curl -s -X POST "$BASE_URL/tournaments" \
    -H "Content-Type: application/json" \
    -d '{
        "name": "Test Tournament - Script",
        "description": "Tournoi cr√©√© par le script de test",
        "maxPlayers": 4,
        "type": "elimination"
    }')

echo "R√©ponse brute: $RESPONSE"

if echo "$RESPONSE" | grep -q '"tournament"'; then
    TOURNAMENT_ID=$(echo "$RESPONSE" | jq -r '.tournament.id')
    log_test "OK" "Tournoi cr√©√© avec ID: $TOURNAMENT_ID"
else
    log_test "ERROR" "√âchec de cr√©ation du tournoi: $RESPONSE"
fi

wait_and_check

# Test 2: V√©rifier les d√©tails du tournoi cr√©√©
echo -e "\n${YELLOW}3. V√©rification des d√©tails du tournoi...${NC}"
DETAILS=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID")
echo "D√©tails: $DETAILS"

if echo "$DETAILS" | grep -q "Test Tournament - Script"; then
    log_test "OK" "D√©tails du tournoi r√©cup√©r√©s"
else
    log_test "ERROR" "Impossible de r√©cup√©rer les d√©tails du tournoi"
fi

# Test 3: Inscrire des joueurs (sans authentification pour simplifier)
echo -e "\n${YELLOW}4. Inscription des joueurs...${NC}"

PLAYERS=("Joueur1" "Joueur2" "Joueur3" "Joueur4")

for i in "${!PLAYERS[@]}"; do
    PLAYER="${PLAYERS[$i]}"
    echo -e "  Inscription de $PLAYER..."
    
    REGISTER_RESPONSE=$(curl -s -X POST "$BASE_URL/tournaments/$TOURNAMENT_ID/register" \
        -H "Content-Type: application/json" \
        -d "{\"alias\": \"$PLAYER\"}")
    
    echo "  R√©ponse: $REGISTER_RESPONSE"
    
    if echo "$REGISTER_RESPONSE" | grep -q '"participant"'; then
        PARTICIPANT_ID=$(echo "$REGISTER_RESPONSE" | jq -r '.participant.id')
        PARTICIPANT_IDS+=("$PARTICIPANT_ID")
        log_test "OK" "$PLAYER inscrit (ID: $PARTICIPANT_ID)"
    else
        log_test "ERROR" "√âchec d'inscription de $PLAYER: $REGISTER_RESPONSE"
    fi
    
    sleep 1
done

wait_and_check

# Test 4: V√©rifier la liste des participants
echo -e "\n${YELLOW}5. V√©rification de la liste des participants...${NC}"
UPDATED_DETAILS=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID")
PARTICIPANT_COUNT=$(echo "$UPDATED_DETAILS" | jq '.participants | length')

if [ "$PARTICIPANT_COUNT" -eq 4 ]; then
    log_test "OK" "4 participants inscrits"
    echo "$UPDATED_DETAILS" | jq '.participants[] | {alias: .alias, order: .registration_order}'
else
    log_test "ERROR" "Nombre de participants incorrect: $PARTICIPANT_COUNT"
fi

# Test 5: D√©marrer le tournoi
echo -e "\n${YELLOW}6. D√©marrage du tournoi...${NC}"
START_RESPONSE=$(curl -s -X POST "$BASE_URL/tournaments/$TOURNAMENT_ID/start")
echo "R√©ponse d√©marrage: $START_RESPONSE"

if echo "$START_RESPONSE" | grep -q '"success"'; then
    log_test "OK" "Tournoi d√©marr√© avec succ√®s"
else
    log_test "ERROR" "√âchec du d√©marrage: $START_RESPONSE"
fi

wait_and_check

# Test 6: V√©rifier que les matchs ont √©t√© g√©n√©r√©s
echo -e "\n${YELLOW}7. V√©rification de la g√©n√©ration des matchs...${NC}"
TOURNAMENT_STATE=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID")
MATCH_COUNT=$(echo "$TOURNAMENT_STATE" | jq '.matches | length')

if [ "$MATCH_COUNT" -eq 2 ]; then
    log_test "OK" "2 matchs g√©n√©r√©s pour les demi-finales"
    echo "$TOURNAMENT_STATE" | jq '.matches[] | {id: .id, round: .round_number, player1: .player1_alias, player2: .player2_alias, status: .status}'
else
    log_test "ERROR" "Nombre de matchs incorrect: $MATCH_COUNT"
fi

# Test 7: R√©cup√©rer le prochain match
echo -e "\n${YELLOW}8. R√©cup√©ration du prochain match...${NC}"
NEXT_MATCH=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID/next-match")
echo "Prochain match: $NEXT_MATCH"

if echo "$NEXT_MATCH" | grep -q '"match"' && ! echo "$NEXT_MATCH" | grep -q 'null'; then
    FIRST_MATCH_ID=$(echo "$NEXT_MATCH" | jq -r '.match.id')
    FIRST_PLAYER1_ID=$(echo "$NEXT_MATCH" | jq -r '.match.player1_id')
    FIRST_PLAYER2_ID=$(echo "$NEXT_MATCH" | jq -r '.match.player2_id')
    log_test "OK" "Prochain match r√©cup√©r√© (ID: $FIRST_MATCH_ID)"
    echo "  Joueur 1: $(echo "$NEXT_MATCH" | jq -r '.match.player1_alias')"
    echo "  Joueur 2: $(echo "$NEXT_MATCH" | jq -r '.match.player2_alias')"
else
    log_test "ERROR" "Impossible de r√©cup√©rer le prochain match"
fi

# Test 8: Jouer le premier match
echo -e "\n${YELLOW}9. Simulation du premier match...${NC}"
MATCH_RESULT=$(curl -s -X POST "$BASE_URL/matches/$FIRST_MATCH_ID/result" \
    -H "Content-Type: application/json" \
    -d "{
        \"winnerId\": \"$FIRST_PLAYER1_ID\",
        \"player1Score\": 11,
        \"player2Score\": 8
    }")

echo "R√©sultat match 1: $MATCH_RESULT"

if echo "$MATCH_RESULT" | grep -q '"success"'; then
    log_test "OK" "Premier match termin√©"
else
    log_test "ERROR" "√âchec de l'enregistrement du r√©sultat: $MATCH_RESULT"
fi

wait_and_check

# Test 9: Jouer le deuxi√®me match
echo -e "\n${YELLOW}10. Simulation du deuxi√®me match...${NC}"
NEXT_MATCH_2=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID/next-match")
SECOND_MATCH_ID=$(echo "$NEXT_MATCH_2" | jq -r '.match.id')
SECOND_PLAYER1_ID=$(echo "$NEXT_MATCH_2" | jq -r '.match.player1_id')

echo "Deuxi√®me match ID: $SECOND_MATCH_ID"
echo "  Joueur 1: $(echo "$NEXT_MATCH_2" | jq -r '.match.player1_alias')"
echo "  Joueur 2: $(echo "$NEXT_MATCH_2" | jq -r '.match.player2_alias')"

MATCH_RESULT_2=$(curl -s -X POST "$BASE_URL/matches/$SECOND_MATCH_ID/result" \
    -H "Content-Type: application/json" \
    -d "{
        \"winnerId\": \"$SECOND_PLAYER1_ID\",
        \"player1Score\": 11,
        \"player2Score\": 6
    }")

if echo "$MATCH_RESULT_2" | grep -q '"success"'; then
    log_test "OK" "Deuxi√®me match termin√©"
else
    log_test "ERROR" "√âchec du deuxi√®me match: $MATCH_RESULT_2"
fi

wait_and_check

# Test 10: V√©rifier la g√©n√©ration de la finale
echo -e "\n${YELLOW}11. V√©rification de la g√©n√©ration de la finale...${NC}"
FINAL_STATE=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID")
FINAL_MATCH_COUNT=$(echo "$FINAL_STATE" | jq '.matches | length')

if [ "$FINAL_MATCH_COUNT" -eq 3 ]; then
    log_test "OK" "Finale g√©n√©r√©e (3 matchs total)"
    echo "√âtat des matchs:"
    echo "$FINAL_STATE" | jq '.matches[] | {round: .round_number, match: .match_number, status: .status, winner: .winner_alias}'
else
    log_test "WARN" "Nombre de matchs: $FINAL_MATCH_COUNT (attendu: 3)"
fi

# Test 11: Jouer la finale
echo -e "\n${YELLOW}12. Simulation de la finale...${NC}"
FINAL_MATCH=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID/next-match")
FINAL_MATCH_ID=$(echo "$FINAL_MATCH" | jq -r '.match.id')
FINAL_PLAYER1_ID=$(echo "$FINAL_MATCH" | jq -r '.match.player1_id')

echo "Finale - Match ID: $FINAL_MATCH_ID"
echo "  Finaliste 1: $(echo "$FINAL_MATCH" | jq -r '.match.player1_alias')"
echo "  Finaliste 2: $(echo "$FINAL_MATCH" | jq -r '.match.player2_alias')"

FINAL_RESULT=$(curl -s -X POST "$BASE_URL/matches/$FINAL_MATCH_ID/result" \
    -H "Content-Type: application/json" \
    -d "{
        \"winnerId\": \"$FINAL_PLAYER1_ID\",
        \"player1Score\": 11,
        \"player2Score\": 9
    }")

if echo "$FINAL_RESULT" | grep -q '"success"'; then
    log_test "OK" "Finale termin√©e"
else
    log_test "ERROR" "√âchec de la finale: $FINAL_RESULT"
fi

wait_and_check

# Test 12: V√©rifier l'√©tat final du tournoi
echo -e "\n${YELLOW}13. V√©rification de l'√©tat final du tournoi...${NC}"
FINAL_TOURNAMENT_STATE=$(curl -s "$BASE_URL/tournaments/$TOURNAMENT_ID")
TOURNAMENT_STATUS=$(echo "$FINAL_TOURNAMENT_STATE" | jq -r '.tournament.status')
WINNER_ID=$(echo "$FINAL_TOURNAMENT_STATE" | jq -r '.tournament.winner_id')

echo "√âtat final du tournoi:"
echo "  Statut: $TOURNAMENT_STATUS"
echo "  Gagnant ID: $WINNER_ID"

if [ "$TOURNAMENT_STATUS" = "finished" ]; then
    log_test "OK" "Tournoi termin√© avec succ√®s"
    
    # Trouver l'alias du gagnant
    WINNER_ALIAS=$(echo "$FINAL_TOURNAMENT_STATE" | jq -r --arg winner_id "$WINNER_ID" '.participants[] | select(.id == $winner_id) | .alias')
    echo -e "${GREEN}üèÜ Gagnant du tournoi: $WINNER_ALIAS${NC}"
else
    log_test "ERROR" "Le tournoi n'est pas termin√© (statut: $TOURNAMENT_STATUS)"
fi

# R√©sum√© final
echo -e "\n${BLUE}=============== R√âSUM√â DES TESTS ===============${NC}"
echo -e "${GREEN}‚úÖ Tournoi cr√©√© et configur√©${NC}"
echo -e "${GREEN}‚úÖ 4 joueurs inscrits avec succ√®s${NC}"
echo -e "${GREEN}‚úÖ Tournoi d√©marr√© et matchs g√©n√©r√©s${NC}"
echo -e "${GREEN}‚úÖ Demi-finales jou√©es${NC}"
echo -e "${GREEN}‚úÖ Finale g√©n√©r√©e et jou√©e${NC}"
echo -e "${GREEN}‚úÖ Tournoi termin√© avec un gagnant${NC}"
echo ""
echo -e "${BLUE}üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !${NC}"
echo -e "${BLUE}üéæ Le syst√®me de tournois fonctionne parfaitement.${NC}"
