# Dockerfile multi-stage sécurisé
# Stage 1: Build du frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app
COPY frontend/package*.json ./
RUN npm ci --only=production

COPY frontend/ ./
RUN npm run build

# Stage 2: Setup du backend
FROM node:20-alpine AS backend-setup

# Crée un user non-root
RUN addgroup -S app && adduser -S app -G app

WORKDIR /app

# Installation des dépendances backend en tant que root
COPY backend/package*.json ./
RUN npm ci --only=production

# Puis changer la propriété des fichiers
RUN chown -R app:app /app

# Basculer vers l'utilisateur non-root
USER app

# Copie du code backend
COPY --chown=app:app backend/ ./

# Stage 3: nginx avec SSL
FROM nginx:alpine AS production

# Installation d'OpenSSL pour les certificats
RUN apk add --no-cache openssl netcat-openbsd

# Copie de la configuration nginx
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf

# Copie des fichiers frontend buildés
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Copie des fichiers backend
COPY --from=backend-setup /app /app/backend

# Génération des certificats SSL
RUN mkdir -p /etc/nginx/ssl && \
    openssl genrsa -out /etc/nginx/ssl/key.pem 2048 && \
    openssl req -new -x509 -key /etc/nginx/ssl/key.pem -out /etc/nginx/ssl/cert.pem -days 365 \
    -subj "/C=FR/ST=France/L=Paris/O=42School/OU=ft_transcendence/CN=localhost"

# Exposition des ports
EXPOSE 80 443

# Script de démarrage
COPY docker/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

CMD ["/usr/local/bin/start.sh"]
